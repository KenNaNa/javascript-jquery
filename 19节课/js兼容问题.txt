常遇到的关于浏览器的宽高问题：
//以下均可console.log()实验
    var winW=document.body.clientWidth||document.docuemntElement.clientWidth;//网页可见区域宽
    var winH=document.body.clientHeight||document.docuemntElement.clientHeight;//网页可见区域宽
    //以上为不包括边框的宽高，如果是offsetWidth或者offsetHeight的话包括边框
    
    var winWW=document.body.scrollWidth||document.docuemntElement.scrollWidth;//整个网页的宽
    var winHH=document.body.scrollHeight||document.docuemntElement.scrollHeight;//整个网页的高

    var scrollHeight=document.body.scrollTop||document.docuemntElement.scrollTop;//网页被卷去的高
    var scrollLeft=document.body.scrollLeft||document.docuemntElement.scrollLeft;//网页左卷的距离

    var screenH=window.screen.height;//屏幕分辨率的高
    var screenW=window.screen.width;//屏幕分辨率的宽
    var screenX=window.screenLeft;//浏览器窗口相对于屏幕的x坐标（除了FireFox）
    var screenXX=window.screenX;//FireFox相对于屏幕的X坐标
    var screenY=window.screenTop;//浏览器窗口相对于屏幕的y坐标（除了FireFox）
    var screenYY=window.screenY;//FireFox相对于屏幕的y坐标


event事件问题：
//event事件问题
    document.onclick=function(ev){//谷歌火狐的写法，IE9以上支持，往下不支持；
        var e=ev;
        console.log(e);
    }
    document.onclick=function(){//谷歌和IE支持，火狐不支持；
        var e=event;
        console.log(e);
    }
    document.onclick=function(ev){//兼容写法；
        var e=ev||window.event;
        var mouseX=e.clientX;//鼠标X轴的坐标
        var mouseY=e.clientY;//鼠标Y轴的坐标
    }



DOM节点相关的问题，我直接封装了函数，以便随时可以拿来使用：
//DOM节点相关，主要兼容IE 6 7 8
    function nextnode(obj){//获取下一个兄弟节点
        if (obj.nextElementSibling) {
            return obj.nextElementSibling;
        } else{
            return obj.nextSibling;
        };
    }
    function prenode(obj){//获取上一个兄弟节点
        if (obj.previousElementSibling) {
            return obj.previousElementSibling;
        } else{
            return obj.previousSibling;
        };
    }
    function firstnode(obj){//获取第一个子节点
        if (obj.firstElementChild) {
            return obj.firstElementChild;//非IE678支持
        } else{
            return obj.firstChild;//IE678支持
        };
    }
    function lastnode(obj){//获取最后一个子节点
        if (obj.lastElementChild) {
            return obj.lastElementChild;//非IE678支持
        } else{
            return obj.lastChild;//IE678支持
        };
    }


document.getElementsByClassName问题：
//DOM节点相关，主要兼容IE 6 7 8
    function nextnode(obj){//获取下一个兄弟节点
        if (obj.nextElementSibling) {
            return obj.nextElementSibling;
        } else{
            return obj.nextSibling;
        };
    }
    function prenode(obj){//获取上一个兄弟节点
        if (obj.previousElementSibling) {
            return obj.previousElementSibling;
        } else{
            return obj.previousSibling;
        };
    }
    function firstnode(obj){//获取第一个子节点
        if (obj.firstElementChild) {
            return obj.firstElementChild;//非IE678支持
        } else{
            return obj.firstChild;//IE678支持
        };
    }
    function lastnode(obj){//获取最后一个子节点
        if (obj.lastElementChild) {
            return obj.lastElementChild;//非IE678支持
        } else{
            return obj.lastChild;//IE678支持
        };
    }
复制代码
document.getElementsByClassName问题：

复制代码
//通过类名获取元素
    document.getElementsByClassName('');//IE 6 7 8不支持；

    //这里可以定义一个函数来解决兼容问题，当然别在这给我提jQuery...
    //第一个为全局获取类名，第二个为局部获取类名
    function byClass1(oClass){//全局获取，oClass为你想要查找的类名，没有“.”
        var tags=document.all?document.all:document.getElementsByTagName('*');
        var arr=[];
        for (var i = 0; i < tags.length; i++) {
            var reg=new RegExp('\\b'+oClass+'\\b','g');
            if (reg.test(tags[i].className)) {
                arr.push(tags[i]);
            };
        };
        return arr;//注意返回的也是数组，包含你传入的class所有元素；
    }

    function byClass2(parentID,oClass){//局部获取类名，parentID为你传入的父级ID
        var parent=document.getElementById(parentID);
        var tags=parent.all?parent.all:parent.getElementsByTagName('*');
        var arr=[];
        for (var i = 0; i < tags.length; i++) {
        var reg=new RegExp('\\b'+oClass+'\\b','g');
            if (reg.test(tags[i].className)) {
                arr.push(tags[i]);
            };
        };
        return arr;//注意返回的也是数组，包含你传入的class所有元素；
     }


获取元素的非行间样式值：
//获取元素的非行间样式值
     function getStyle(object,oCss) {
             if (object.currentStyle) {
                 return object.currentStyle[oCss];//IE
             }else{
                 return getComputedStyle(object,null)[oCss];//除了IE
             }
     }


设置监听事件：

复制代码
//设置监听事件
     function addEvent(obj,type,fn){//添加事件监听，三个参数分别为 对象、事件类型、事件处理函数，默认为false
        if (obj.addEventListener) {
            obj.addEventListener(type,fn,false);//非IE
        } else{
            obj.attachEvent('on'+type,fn);//ie,这里已经加上on，传参的时候注意不要重复加了
        };
    }
    function removeEvent(obj,type,fn){//删除事件监听
        if (obj.removeEventListener) {
            obj.removeEventListener(type,fn,false);//非IE
        } else{
            obj.detachEvent('on'+type,fn);//ie，这里已经加上on，传参的时候注意不要重复加了
        };
    }
复制代码



元素到浏览器边缘的距离：
//在这里加个元素到浏览器边缘的距离，很实用
    function offsetTL(obj){//获取元素内容距离浏览器边框的距离（含边框）
        var ofL=0,ofT=0;
        while(obj){
            ofL+=obj.offsetLeft+obj.clientLeft;
            ofT+=obj.offsetTop+obj.clientTop;
            obj=obj.offsetParent;
        }
        return{left:ofL,top:ofT};
    }

阻止事件传播：
//js阻止事件传播，这里使用click事件为例
    document.onclick=function(e){
        var e=e||window.event;
        if (e.stopPropagation) {
            e.stopPropagation();//W3C标准
        }else{
            e.cancelBubble=true;//IE....
        }
    }


阻止默认事件：
//js阻止默认事件
    document.onclick=function(e){
        var e=e||window.event;
        if (e.preventDefault) {
            e.preventDefault();//W3C标准
        }else{
            e.returnValue='false';//IE..
        }
    }



关于EVENT事件中的target：
//关于event事件中的target
    document.onmouseover=function(e){
        var e=e||window.event;
        var Target=e.target||e.srcElement;//获取target的兼容写法，后面的为IE
        var from=e.relatedTarget||e.formElement;//鼠标来的地方，同样后面的为IE...
        var to=e.relatedTarget||e.toElement;//鼠标去的地方
    }


鼠标滚轮滚动事件：
复制代码
//鼠标滚轮事件
    //火狐中的滚轮事件
    document.addEventListener("DOMMouseScroll",function(event){
        alert(event.detail);//若前滚的话为 -3，后滚的话为 3
    },false)
    //非火狐中的滚轮事件
    document.onmousewheel=function(event){
        alert(event.detail);//前滚：120，后滚：-120
    }
复制代码


节点加载：
//火狐下特有的节点加载事件，就是节点加载完才执行，和onload不同
    //感觉用到的不多，直接把js代码放在页面结构后面一样能实现。。
    document.addEventListener('DOMContentLoaded',function ( ){},false);//DOM加载完成。好像除IE6-8都可以
 


1.获取样式表里面的width,border color 之类的css(不是行间) 主要是IE6-7支持currentStyle,标准浏览器支持getComputedStyle;

实例：封装函数 

复制代码代码如下:

function getStyle(obj,name){ 
if(obj.currentStyle){ 
return obj.currentStyle[name]; 
} 
else{ 
return getComputedStyle(obj,false)[name]; 
} 
} 

调用：getStyle('color'); 

2.获取滚动的距离 
document.body.scrollTop 适用于 标准浏览器 
document.documentElement.scrollTop 适用于IE9以下版本 
兼容性可以这样写 
var top = document.body.scrollTop | document.documentElement.scrollTop; 

3.事件对象 
标准浏览器：事件对象作为事件函数的参数 
IE低版本 需要直接用event对象（全局） 

复制代码代码如下:

function （ev）{ 
var event = ev || event; 
} 

现在event就作为了事件对象

4.绑定事件 IE 的绑定事件为 attachEvent/detachEvent(绑定或取消);标准浏览器 addEventListener/removeEventListener（绑定或取消） 
以下是事件绑定或取消的参数，在事件绑定中 函数不能是匿名函数 否则取消不掉 
addEventListener的使用方式： 

target.addEventListener(type, listener, useCapture); 

target： 文档节点、document、window 或 XMLHttpRequest。 
type： 字符串，事件名称，不含“on”，比如“click”、“mouseover”、“keydown”等。 
listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 
useCapture ：是否使用捕捉，一般用 false 。例如：document.getElementById("testText").addEventListener("keydown", function (event) { alert(event.keyCode); }, false); 

IE中： 

target.attachEvent(type, listener); 
target： 文档节点、document、window 或 XMLHttpRequest。 
type： 字符串，事件名称，含“on”，比如“onclick”、“onmouseover”、“onkeydown”等。 
listener ：实现了 EventListener 接口或者是 JavaScript 中的函数。 例如：document.getElementById("txt").attachEvent("onclick",function(event){alert(event.keyCode);}); 

事件绑定的封装函数： 

复制代码代码如下:

function addEvent(obj,ev,fn){ 
if(obj.attachEvent){ 
obj.attachEvent('on'+ev,fn) 
} 
else{ 
obj.addEventListener(ev, fn, false); 

} 
} 

这样的封装函数如果绑定事件fn函数里面用到this 需提防 this 为window(只有IE低版本有这个bug) 不是obj; 

复制代码代码如下:

addEvent(document,'click',function(ev){ 

var ev=ev||window.event; 
var target = ev.target||ev.srcElement; // 获得事件源 主要处理IE低版本this为window之bug 
alert(target) 
}); 

绑定之取消事件 fn为函数名字 

复制代码代码如下:

function removeEvent(obj,ev,fn){ 
if(obj.detachEvent){ 
obj.detachEvent('on'+ev,fn) 
} 
else{ 
obj.removeEventListener(ev, fn, false); 

} 
} 

5.ajax 
Ajax创建XMLHttp对象 标准版浏览器与IE低版本不兼容 
标准版创建XMLHttp对象： 

复制代码代码如下:

//1.创建对象 
if(window.XMLHttpRequest) 
{ 
var oAjax=new XMLHttpRequest();//标准浏览器 
} 
else 
{ 
var oAjax=new ActiveXObject("Microsoft.XMLHTTP");//IE低版本 
} 
alert(oAjax); 

6.取消默认事件 
js中默认事件取消是主要是两种 return false 和 preventDefault 
取消默认事件中return false 是兼容任何浏览器 但是如果遇到事件绑定的 addEventListener 会取消不掉默认事件 
取消默认右键事件例子： 

复制代码代码如下:

document.addEventListener('contextmenu',function(ev){ 
ev.preventDefault(); 
})) 
document.oncontextmenu = function(){ 
return false; 
} 

7.call与apply 的区别 
call、apply 可以调用函数 
例如 

复制代码代码如下:

function show(){ 
alert(this) 
} 
//show(); 弹出window 
//show.call();弹出windwo 
//show.call(this) //弹出window 
//show.call(5); //弹出5; 
show.call(this,5); //弹出window 

call(this,arg1,arg2,...)可以看出call里面的参数 this主要是指代事件对象 以后参数是函数中用到的参数 
用call与apply来主要是修改this的，功能上和普通的函数没有什么太大的区别 
apply(this,arguments) 主要是对参数不确定来使用 
8、DOM取得子节点children和childNodes 
children 取得 子节点 只能是取第一层 必须是标签节点 
例如： 

复制代码代码如下:

<span><a href="#">文字1</a></span> 
<span><a href="#">文字2</a></span> 

children[0] 这样只能是取到第一个span 要是想取到第一个a标签 children[0].children[0],所以说children的长度只是2； 
childNodes在高版本上会算上空文本 在火狐 谷歌上 上面的是长度是5;在IE低版本（6-8）长度是4.